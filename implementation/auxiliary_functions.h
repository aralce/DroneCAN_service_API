#ifndef AUXILIARY_FUNCTIONS_H_
#define AUXILIARY_FUNCTIONS_H_
#include <cstring>
#include "uavcan_driver/uavcan_messages_used.h"

#define UAVCAN_PARAM_VALUE_MAX_NAME_LENGTH 128

uavcan_protocol_param_Value package_uavcan_param_value(int32_t value_to_package);
uavcan_protocol_param_Value package_uavcan_param_value(int64_t value_to_package);
uavcan_protocol_param_Value package_uavcan_param_value(float value_to_package);
uavcan_protocol_param_Value package_uavcan_param_value(bool value_to_package);

uavcan_protocol_param_Value package_uavcan_param_value(const uint8_t* value_to_package);
uavcan_protocol_param_Value package_uavcan_param_value(const char* value_to_package);

uavcan_protocol_param_Value package_uavcan_param_value_empty();

uavcan_protocol_param_NumericValue package_uavcan_param_numeric_value(int32_t value_to_package);
uavcan_protocol_param_NumericValue package_uavcan_param_numeric_value(float value_to_package);

uavcan_protocol_param_NumericValue package_uavcan_param_numeric_value_empty();

void copy_uavcan_param_value(uavcan_protocol_param_Value& dest, const uavcan_protocol_param_Value& src);

using numeric_value_t = uavcan_protocol_param_NumericValue;
void copy_numeric_value(numeric_value_t& dest, const numeric_value_t& src);

#endif // AUXILIARY_FUNCTIONS_H_